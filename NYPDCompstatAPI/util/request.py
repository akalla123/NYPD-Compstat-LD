import json
import requests


# Base API URL (needs substitution from dictionary below)
BASE_URL = 'http://compstat.nypd.org/api/reports/{0}/datasource/list'

# Mapping of request types to URL substitution number
REQUEST_TYPE_MAP = {
    'precinct': 6,
    'hour': 8,
    'subtype': 9,
    'day_of_week': 4,
    'timeline_7day': 16,
    'timeline_52week': 22,
    'timeline_years': 23
}


def makeRequest(request_type: str, dataset_id: str) -> dict:
    """Function to make request to the NYPD Compstat database, for a given
    data request type, and dataset ID (generated with utility function).
    
    Arguments:
        request_type {str} -- Request type from REQUEST_TYPE_MAP.
        dataset_id {str} -- Dataset ID generated by utility function.
    
    Raises:
        KeyError -- Raised if iinvalid request_type is used.
    
    Returns:
        dict -- Request response.
    """

    # Checking if valid request type, raise error if not
    if request_type not in REQUEST_TYPE_MAP: raise KeyError

    # Building request URL
    r_url = BASE_URL.format(request_type)

    # Building request parameters
    r_params = __buildRequestParams(dataset_id)

    try:
        # Making request
        r = requests.post(r_url, data=__buildRequestParams(r_params))
    except Exception:
        return None
    
    return json.loads(r.text)


def __buildRequestParams(dataset_id: str) -> dict:
    """Function to generate expected parameters given the expected dataset.
    id   
    
    Arguments:
        dataset_id {str} -- Dataset ID generated by utility function.
    
    Returns:
        dict -- Generated parameters.
    """

    return {
        'filters': [{
            'key': 'PRECINCTKey',
            'label': 'Precint',
            'values': ['Citywide']
        },
        {
            'key': 'BOROKey',
            'label': 'Patrol Borough',
            'values': ['Citywide']
        },
        {
            'key': 'RECORDID',
            'label': 'SELECTION',
            'values': [dataset_id]
        }]
    }
